// SoftwareSerial for avr - Version: Latest 
#include <SoftwareSerial.h>


// Sketch generated by the Arduino IoT Cloud Thing "Untitled"
// https://create.arduino.cc/cloud/things/e1d24993-b9bc-44e5-b601-d8957ce9e20c

// Arduino IoT Cloud Variables description

// The following variables are automatically generated and updated when changes are made to the Thing

// float moisture;
// bool manual_water;
// bool pump_state;

// Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
//   which are called when their values are changed from the Dashboard.
//   These functions are generated with the Thing and added at the end of this sketch.

#include "thingProperties.h"
#include <ESP8266WiFi.h>

String inString = "";

#define MYPORT_TX 15
#define MYPORT_RX 13

SoftwareSerial myPort(MYPORT_RX, MYPORT_TX);


void setup() {
  // Initializserial and wait for port to open:
  Serial.begin(9600);
  
  myPort.begin(115200);
  myPort.setTimeout(5);
  if (!myPort) { // If the object did not initialize, then its configuration is invalid
    Serial.println("Invalid SoftwareSerial pin configuration, check config"); 
    while (1) { // Don't continue with invalid configuration
      delay (1000);
    }
  }

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void moistureAndPumpStateCalc() {
  if (myPort.available() >= 3) {
    Serial.println("myPort has available!");
    // read full string
    String input = myPort.readString();

    // split string based on the %
    int percent_index = input.indexOf("%");

    // left side will be moisture
    String moisture_substring = input.substring(0, percent_index);
    float moisture_substring_float = moisture_substring.toFloat();
    moisture = moisture_substring_float;
    Serial.print(moisture);

    // right side will be pump state
    String pump_state_substring = input.substring(percent_index + 1);
    bool pump_state_substring_bool = pump_state_substring.toInt();
    pump_state = pump_state_substring_bool;
    Serial.print("|"); Serial.println(pump_state);
  }
}

void loop() {
  moistureAndPumpStateCalc();
  ArduinoCloud.update();
}

void onManualWaterChange()  {
  Serial.println("GOT BUTTON CHANGE");
  myPort.print(manual_water);
  myPort.flush();
}

/*
  Since Moisture is READ_WRITE variable, onMoistureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMoistureChange()  {

}

/*
  Since PumpState is READ_WRITE variable, onPumpStateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPumpStateChange()  {
  // Add your code here to act upon PumpState change
}
